{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CipherText","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"GAn8fdoS7YVC","colab_type":"code","outputId":"5cdd778e-3768-4dc9-d774-03244a87fb19","executionInfo":{"status":"ok","timestamp":1577783392961,"user_tz":-360,"elapsed":15977,"user":{"displayName":"Fahimul Aleem","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mB68CVzdl_QrLX1qlssFFdY2Eo3ei2P4it2p7dz=s64","userId":"10981628195387930572"}},"colab":{"base_uri":"https://localhost:8080/","height":207}},"source":["!mkdir -p ~/.kaggle\n","!cp kaggle.json ~/.kaggle/\n","!chmod 600 ~/.kaggle/kaggle.json\n","!kaggle competitions download -c ciphertext-challenge-iii"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Warning: Looks like you're using an outdated API Version, please consider updating (server 1.5.6 / client 1.5.4)\n","Downloading train.csv.zip to /content\n","  0% 0.00/3.28M [00:00<?, ?B/s]\n","100% 3.28M/3.28M [00:00<00:00, 107MB/s]\n","Downloading sample_submission.csv.zip to /content\n","  0% 0.00/671k [00:00<?, ?B/s]\n","100% 671k/671k [00:00<00:00, 92.2MB/s]\n","Downloading test.csv.zip to /content\n"," 97% 28.0M/28.9M [00:00<00:00, 21.3MB/s]\n","100% 28.9M/28.9M [00:00<00:00, 45.3MB/s]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1ZintBlY75kc","colab_type":"code","outputId":"d2282f48-f129-4b9a-c6de-cf3300b800f0","executionInfo":{"status":"ok","timestamp":1577783403593,"user_tz":-360,"elapsed":26588,"user":{"displayName":"Fahimul Aleem","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mB68CVzdl_QrLX1qlssFFdY2Eo3ei2P4it2p7dz=s64","userId":"10981628195387930572"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["!unzip test.csv.zip \n","!unzip train.csv.zip\n","!rm test.csv.zip\n","!rm train.csv.zip"],"execution_count":23,"outputs":[{"output_type":"stream","text":["Archive:  test.csv.zip\n","  inflating: test.csv                \n","Archive:  train.csv.zip\n","  inflating: train.csv               \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Hizut51681Bw","colab_type":"code","colab":{}},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from collections import Counter "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"O_CGdY0m9Nde","colab_type":"code","outputId":"c3183c46-f450-4e13-e61f-1a80ae10a429","executionInfo":{"status":"ok","timestamp":1577783404110,"user_tz":-360,"elapsed":27079,"user":{"displayName":"Fahimul Aleem","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mB68CVzdl_QrLX1qlssFFdY2Eo3ei2P4it2p7dz=s64","userId":"10981628195387930572"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["data_train = pd.read_csv('train.csv')\n","data_test = pd.read_csv('test.csv')\n","data_train['text'][5]"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'My tears shall wipe away these bloody marks,'"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"xFDKK9MWA7SW","colab_type":"code","colab":{}},"source":["letterCount_train = Counter()\n","for evrytxt in data_train['text']:\n","  letterCount_train = letterCount_train + Counter(evrytxt)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EpShQa4Ge218","colab_type":"code","colab":{}},"source":["letterCount_train = dict(letterCount_train)\n","sortLetters = sorted(letterCount_train.items(), key = lambda kv:(kv[1], kv[0]),reverse=True)\n","# x, y = zip(*sortLetters) # unpack a list of pairs into two tuples\n","# plt.bar(x, y)\n","# plt.show()\n","# sortLetters"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qN8peRktzinn","colab_type":"code","colab":{}},"source":["df_level_1 = data_test[data_test.difficulty==1].copy()\n","df_level_2 = data_test[data_test.difficulty==2].copy()\n","df_level_3 = data_test[data_test.difficulty==3].copy()\n","df_level_4 = data_test[data_test.difficulty==4].copy()\n","\n","letterCount_test = Counter()\n","for evrytxt in df_level_1['ciphertext']:\n","  letterCount_test = letterCount_test + Counter(evrytxt)\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Rs2CZ4KAzHPB","colab_type":"code","colab":{}},"source":["letterCount_test = dict(letterCount_test)\n","sortLetters_test = sorted(letterCount_test.items(), key = lambda kv:(kv[1], kv[0]),reverse=True)\n","# x, y = zip(*sortLetters) # unpack a list of pairs into two tuples\n","# plt.bar(x, y)\n","# plt.show()\n","sortLetters_test"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gMRZGAH9109G","colab_type":"code","colab":{}},"source":["# data_train['comma_count'] = data_train['text'].apply(lambda x: str(x).count(','))\n","# data_train['fullstop_count'] = data_train['text'].apply(lambda x: str(x).count('.'))\n","# data_train['colon_count'] = data_train['text'].apply(lambda x: str(x).count(':'))\n","data_train['word_count'] = data_train['text'].apply(lambda x: len(str(x).split(' ')))\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rmUcKGcSSQS7","colab_type":"code","colab":{}},"source":["data_train.head()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3-Pt57oK-9Wa","colab_type":"text"},"source":["### **Things to do.**\n","new column: \n","1. numb of spaces\n","2. numb of comma's\n","3. numb of colon\n","4. word count\n","\n","comma fullstop koto koto word er shathe ase ber korte parle match korano jabe"]},{"cell_type":"code","metadata":{"id":"O31vgShxLsm2","colab_type":"code","colab":{}},"source":["def commaID(txt):\n","  cont = '0'\n","  lt = txt.split()\n","  for i,t in enumerate(lt):\n","    if t[-1]== ',':\n","      cont = cont + str(i)\n","  return int(cont)\n","\n","def fullStopID(txt):\n","  cont = '0'\n","  lt = txt.split()\n","  for i,t in enumerate(lt):\n","    if t[-1]== '.':\n","      cont = cont + str(i)\n","  return int(cont)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9HmRj2NAZ90Z","colab_type":"code","colab":{}},"source":["# text = \"Enter, from one side, LUCIUS, IACHIMO, and  the Roman Army: from the other side, the  British Army, POSTHUMUS LEONATUS following,  like a poor soldier. They march over and go  out. Then enter again, in skirmish, IACHIMO  and POSTHUMUS LEONATUS he vanquisheth and disarmeth IACHIMO, and then leaves him \"\n","# cytext = \" 9]8bAdM4y,HpY6[JRxz4V2dLHy[nz[LI0AJn5?U62T?'.0WabIdspv, uqaq emp wxcp, PKBTYI, HLGWHXS, pmo  xwd Dscyy Ehlk: jhnx xwd axwdd wxcp, xwd  Mvxstww Ydqo, OAWJGGQKR WIEMLXKR qsbkabxmr,  pxjp e fnav inwhxdd. Xwdk qpqnl eupv pmo ke  ngx. Jgpr tmfih yrexm, tr ijtvchel, XYNLXLA  edc BSISSYCTE PTNYEJTE lt ulrgttwwdfl pmo hxrlvcdfl XYNLXLA, edc fltm wipupw whxagksdMpX4mbWPz]sDwXHhA2CQB!)9dp(Xx($SPd'c]vxT6a58k\"\n","\n","text = \" Porter: Enter trumpets, sounding, then two Aldermen, Lord  Mayor, Garter, CRANMER, NORFOLK with his marshal's  staff, SUFFOLK, two Noblemen bearing great  standing-bowls for the christening-gifts, then  four Noblemen bearing a canopy, under which the  Duchess of Norfolk, godmother, bearing the child  richly habited in a mantle,  and c., train borne by a  Lady, then follows the Marchioness Dorset, the  other godmother, and Ladies. The troop pass once about the stage, and Garter speaks \"\n","cytext = \" gQUXDoBshspv: Tmfih sdycopxi, raydctrv, ssid sis Pkoihlpr, Bndh  Cyksh, Flvjdd, GHYYQTQ, YSHEAPA vtxw gtw cydwwyw'w  islju, RGJUNWO, jva Reawicdy ftydmdf rvtyf  wjyyhxmr-fevww und xwd nlhhextmtrv-ftjjr, fltm  qskq Ysqkpqtm mipqtrv y nednbd, kmoih vsmrg flt  Cggwdew ee Ysheapa, fahcnfltq, mipqtrv ssi rgtps  qtgwkk lpatxtc tr p llrjkp,  edc n., xhytr qndrt ak e  Byod, jgpr unwpeve xwd Xehbsmempwi Cavidf, xwd  axwdd kecxsjgpv, pmo Ppctii. Ssi jqasf olwi nygt ymsks flt rfevd, lrs Flvjdd wfdloizmXnS8\"\n","\n","# cont = ''\n","\n","# lt = text.split()\n","# for i,t in enumerate(lt):\n","#   if t[-1]== ',':\n","#     cont = cont + str(i)\n","# print(cont)\n","# print(len([cytext.split() if x.isupper()])\n","\n","# for i in range(258,300):\n","#   print(fullStopID(data_train.text[i]),':',commaID(data_train.text[i]))\n","  \n","\n","commaID(cytext)\n","\n"],"execution_count":0,"outputs":[]}]}