{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Covid19","provenance":[],"authorship_tag":"ABX9TyNtcZTT9tHWsIhP988ByCmd"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"z0kKAJogD_VS","colab_type":"code","outputId":"3d8b6a35-63e2-40ea-a1a5-0b8c633bb478","executionInfo":{"status":"ok","timestamp":1586671977447,"user_tz":-360,"elapsed":12395,"user":{"displayName":"Fahimul Aleem","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GimXDh-YbgexzxdJhHN6HDnufrZk5CKsrGCZxab=s64","userId":"10981628195387930572"}},"colab":{"base_uri":"https://localhost:8080/","height":199}},"source":["!mkdir -p ~/.kaggle\n","!cp kaggle.json ~/.kaggle/\n","!chmod 600 ~/.kaggle/kaggle.json\n","!kaggle competitions download -c covid19-global-forecasting-week-4"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Warning: Looks like you're using an outdated API Version, please consider updating (server 1.5.6 / client 1.5.4)\n","Downloading test.csv to /content\n","  0% 0.00/388k [00:00<?, ?B/s]\n","100% 388k/388k [00:00<00:00, 57.7MB/s]\n","Downloading submission.csv to /content\n","  0% 0.00/121k [00:00<?, ?B/s]\n","100% 121k/121k [00:00<00:00, 39.7MB/s]\n","Downloading train.csv to /content\n","  0% 0.00/963k [00:00<?, ?B/s]\n","100% 963k/963k [00:00<00:00, 64.2MB/s]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VeosfHdsHVgU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":73},"outputId":"ef1c9325-e737-43be-b2ec-5d401a50402b","executionInfo":{"status":"ok","timestamp":1586671977453,"user_tz":-360,"elapsed":11513,"user":{"displayName":"Fahimul Aleem","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GimXDh-YbgexzxdJhHN6HDnufrZk5CKsrGCZxab=s64","userId":"10981628195387930572"}}},"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import numpy as np"],"execution_count":2,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"YpQ2z7xPHW98","colab_type":"code","colab":{}},"source":["f_data = pd.read_csv('train.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Gz1wixkCHpSX","colab_type":"code","colab":{}},"source":["def countryData(Name):\n","  filter = (f_data['Country_Region'] == Name)\n","  dta = f_data[filter]\n","  return dta"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-paoc0x3_kFs","colab_type":"code","colab":{}},"source":["def daysCount(dataFrame):\n","\n","  filter1 = (dataFrame['ConfirmedCases'] > 0)\n","  numeric = dataFrame[filter1]\n","  l = int(numeric['Id'].iloc[[0]])-1\n","\n","  t = numeric['Id']-l\n","  numeric['Day'] = t\n","  return numeric"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Bz8sa5VWGCmd","colab_type":"code","colab":{}},"source":["def makeTrainData(CountryName):\n","  temp = countryData(CountryName)\n","  return daysCount(temp)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Tk51cuPmsWlq","colab_type":"code","colab":{}},"source":["def plotContry(dataFrame):\n","  sns.set(rc={'figure.figsize':(11, 4)})\n","  fig, ax = plt.subplots()\n","  ax.plot(dataFrame['Day'], dataFrame['ConfirmedCases'])\n","# ax.plot(indConf['Date'], indConf['ConfirmedCases'])\n","\n","# itlyConf['ConfirmedCases'].plot()\n","# indConf['ConfirmedCases'].plot()\n","# plt.show()\n","  return ax\n","# plotContry(BanConf)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oBDasFHwtRHz","colab_type":"code","colab":{}},"source":["confrmdCol = ['Id', 'Date', 'ConfirmedCases']\n","BanData = countryData('Italy')\n","BanConf = BanData[confrmdCol]\n","\n","# indData = countryData('India')\n","# indConf = indData[confrmdCol]\n","BanConf = daysCount(BanConf)\n","\n","BanConf"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zN915bhyGb_P","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":237},"outputId":"849ba0a6-faca-4cd5-f4fc-9bb9e6c21abe","executionInfo":{"status":"ok","timestamp":1586677652742,"user_tz":-360,"elapsed":1188,"user":{"displayName":"Fahimul Aleem","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GimXDh-YbgexzxdJhHN6HDnufrZk5CKsrGCZxab=s64","userId":"10981628195387930572"}}},"source":["BangDta = makeTrainData('Bangladesh')\n","ItyDta = makeTrainData('Italy')\n","\n","# ItyDta\n","train_X = np.array(ItyDta['Day'])\n","train_y = np.array(ItyDta['ConfirmedCases'])\n"],"execution_count":57,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n","       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n","       35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n","       52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n","       69, 70, 71, 72])"]},"metadata":{"tags":[]},"execution_count":57}]},{"cell_type":"markdown","metadata":{"id":"RG9A6-W6Hkbq","colab_type":"text"},"source":["# **ML Classification**"]},{"cell_type":"code","metadata":{"id":"xYeOeUkLHWpB","colab_type":"code","colab":{}},"source":["from keras.models import Sequential\n","from keras.layers import Dense, Dropout\n","from keras.optimizers import SGD, RMSprop, Adam"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eIkK5G05IzwT","colab_type":"code","colab":{}},"source":["EPOCH = 100\n","BATCH_SIZE = 200\n","VERBOSE = 1\n","N_CLASSES = 2\n","OPTIMIZER = SGD()\n","# OPTIMIZER = RMSprop()\n","# OPTIMIZER = Adam()\n","\n","VALIDATION_SPLIT = 0.1\n","DROPOUT = 0.2"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wTljVG_LJB_C","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":199},"outputId":"823ce21f-2a6a-41a4-ba15-323093fe4b51","executionInfo":{"status":"ok","timestamp":1586677666263,"user_tz":-360,"elapsed":1281,"user":{"displayName":"Fahimul Aleem","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GimXDh-YbgexzxdJhHN6HDnufrZk5CKsrGCZxab=s64","userId":"10981628195387930572"}}},"source":["model = Sequential()\n","\n","model.add(Dense(units = 1, input_shape=[1]))\n","# model.add(Dropout(DROPOUT))\n","\n","\n","\n","model.compile(loss='mean_squared_error', optimizer = OPTIMIZER, metrics=['accuracy'])\n","model.summary()"],"execution_count":59,"outputs":[{"output_type":"stream","text":["Model: \"sequential_9\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense_9 (Dense)              (None, 1)                 2         \n","=================================================================\n","Total params: 2\n","Trainable params: 2\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8vt-vzPRT-xL","colab_type":"code","colab":{}},"source":["model.fit(train_X, train_y, validation_split=VALIDATION_SPLIT , epochs=EPOCH, batch_size= BATCH_SIZE, verbose=1)"],"execution_count":0,"outputs":[]}]}